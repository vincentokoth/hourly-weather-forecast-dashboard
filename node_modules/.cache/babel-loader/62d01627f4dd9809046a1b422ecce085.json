{"ast":null,"code":"var _jsxFileName = \"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/src/App.js\";\nimport React, { Component } from 'react';\nimport CardSection from './components/CardSection';\nimport ChartSection from './components/ChartSection';\nimport Header from './components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.fetchData = async () => {\n      try {\n        const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${this.state.latitude}&longitude=${this.state.longitude}&hourly=temperature_2m,precipitation_probability&forecast_days=1`);\n        const jsonData = await response.json(); // Determine highest and lowest temperature probability\n\n        const temperatureProbabilities = jsonData.hourly.temperature_2m;\n        const highestTempProbability = Math.max(...temperatureProbabilities);\n        const lowestTempProbability = Math.min(...temperatureProbabilities);\n        const highestTempIndex = temperatureProbabilities.indexOf(highestTempProbability);\n        const lowestTempIndex = temperatureProbabilities.indexOf(lowestTempProbability); // Determine highest and lowest temperature hours\n\n        const temperatureHours = jsonData.hourly.time;\n        const highestTempHour = temperatureHours[highestTempIndex];\n        const lowestTempHour = temperatureHours[lowestTempIndex]; // Determine highest and lowest precipitation probability\n\n        const precipitationProbabilities = jsonData.hourly.precipitation_probability;\n        const highestPrecipProbability = Math.max(...precipitationProbabilities);\n        const lowestPrecipProbability = Math.min(...precipitationProbabilities);\n        const highestPrecipIndex = precipitationProbabilities.indexOf(highestPrecipProbability);\n        const lowestPrecipIndex = precipitationProbabilities.indexOf(lowestPrecipProbability); // Determine highest and lowest precipitation hours\n\n        const precipitationHours = jsonData.hourly.time;\n        const highestPrecipHour = precipitationHours[highestPrecipIndex];\n        const lowestPrecipHour = precipitationHours[lowestPrecipIndex];\n        this.setState({\n          weatherData: jsonData,\n          highestTempHour,\n          highestTempProbability,\n          lowestTempHour,\n          lowestTempProbability,\n          highestPrecipHour,\n          highestPrecipProbability,\n          lowestPrecipHour,\n          lowestPrecipProbability\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    this.handleSubmit = async event => {\n      const selectedOption = event.target.value;\n      const [latitude, longitude] = selectedOption.split(',');\n      await this.setState({\n        latitude,\n        longitude,\n        weatherData: {}\n      }, () => {\n        this.fetchData();\n      });\n    };\n\n    this.state = {\n      latitude: 1,\n      longitude: 38,\n      weatherData: {},\n      highestTempHour: '',\n      highestTempProbability: '',\n      lowestTempHour: '',\n      lowestTempProbability: '',\n      highestPrecipHour: '',\n      highestPrecipProbability: '',\n      lowestPrecipHour: '',\n      lowestPrecipProbability: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.fetchData();\n    this.interval = setInterval(() => this.fetchData(), 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      weatherData,\n      highestTempHour,\n      highestTempProbability,\n      lowestTempHour,\n      lowestTempProbability,\n      highestPrecipHour,\n      highestPrecipProbability,\n      lowestPrecipHour,\n      lowestPrecipProbability\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        handle_Submit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardSection, {\n        highestTempHour: highestTempHour,\n        highestTempProbability: highestTempProbability + \"°C\",\n        lowestTempHour: lowestTempHour,\n        lowestTempProbability: lowestTempProbability + \"°C\",\n        highestPrecipHour: highestPrecipHour,\n        highestPrecipProbability: highestPrecipProbability + \"mm\",\n        lowestPrecipHour: lowestPrecipHour,\n        lowestPrecipProbability: lowestPrecipProbability + \"mm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartSection, {\n        temperature: weatherData.hourly ? weatherData.hourly.temperature_2m : [],\n        precipitationProbability: weatherData.hourly ? weatherData.hourly.precipitation_probability : []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/src/App.js"],"names":["React","Component","CardSection","ChartSection","Header","App","constructor","fetchData","response","fetch","state","latitude","longitude","jsonData","json","temperatureProbabilities","hourly","temperature_2m","highestTempProbability","Math","max","lowestTempProbability","min","highestTempIndex","indexOf","lowestTempIndex","temperatureHours","time","highestTempHour","lowestTempHour","precipitationProbabilities","precipitation_probability","highestPrecipProbability","lowestPrecipProbability","highestPrecipIndex","lowestPrecipIndex","precipitationHours","highestPrecipHour","lowestPrecipHour","setState","weatherData","error","console","handleSubmit","event","selectedOption","target","value","split","bind","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CardSection from './components/CardSection';\nimport ChartSection from './components/ChartSection';\nimport Header from './components/Header';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      latitude: 1,\n      longitude: 38,\n      weatherData: {},\n      highestTempHour: '',\n      highestTempProbability: '',\n      lowestTempHour: '',\n      lowestTempProbability: '',\n      highestPrecipHour: '',\n      highestPrecipProbability: '',\n      lowestPrecipHour: '',\n      lowestPrecipProbability: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  fetchData = async () => {\n    try {\n      const response = await fetch(\n        `https://api.open-meteo.com/v1/forecast?latitude=${this.state.latitude}&longitude=${this.state.longitude}&hourly=temperature_2m,precipitation_probability&forecast_days=1`\n      );\n      const jsonData = await response.json();\n\n      // Determine highest and lowest temperature probability\n      const temperatureProbabilities = jsonData.hourly.temperature_2m;\n      const highestTempProbability = Math.max(...temperatureProbabilities);\n      const lowestTempProbability = Math.min(...temperatureProbabilities);\n      const highestTempIndex = temperatureProbabilities.indexOf(highestTempProbability);\n      const lowestTempIndex = temperatureProbabilities.indexOf(lowestTempProbability);\n\n      // Determine highest and lowest temperature hours\n      const temperatureHours = jsonData.hourly.time;\n      const highestTempHour = temperatureHours[highestTempIndex];\n      const lowestTempHour = temperatureHours[lowestTempIndex];\n\n      // Determine highest and lowest precipitation probability\n      const precipitationProbabilities = jsonData.hourly.precipitation_probability;\n      const highestPrecipProbability = Math.max(...precipitationProbabilities);\n      const lowestPrecipProbability = Math.min(...precipitationProbabilities);\n      const highestPrecipIndex = precipitationProbabilities.indexOf(highestPrecipProbability);\n      const lowestPrecipIndex = precipitationProbabilities.indexOf(lowestPrecipProbability);\n\n      // Determine highest and lowest precipitation hours\n      const precipitationHours = jsonData.hourly.time;\n      const highestPrecipHour = precipitationHours[highestPrecipIndex];\n      const lowestPrecipHour = precipitationHours[lowestPrecipIndex];\n\n      this.setState({ \n        weatherData: jsonData,\n        highestTempHour,\n        highestTempProbability,\n        lowestTempHour,\n        lowestTempProbability,\n        highestPrecipHour,\n        highestPrecipProbability,\n        lowestPrecipHour,\n        lowestPrecipProbability\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  async componentDidMount() {\n    await this.fetchData();\n    this.interval = setInterval(() => this.fetchData(), 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleSubmit = async (event) => {\n    const selectedOption = event.target.value;\n    const [latitude, longitude] = selectedOption.split(',');\n    \n    await this.setState({ latitude, longitude, weatherData: {} }, () => {\n        this.fetchData();\n    });\n  };\n\n  render() {\n    const { weatherData, highestTempHour, highestTempProbability, lowestTempHour, lowestTempProbability, highestPrecipHour, highestPrecipProbability, lowestPrecipHour, lowestPrecipProbability } = this.state;\n\n    return (\n      <div>\n        <Header handle_Submit={this.handleSubmit} />\n        <CardSection\n          highestTempHour={highestTempHour}\n          highestTempProbability={highestTempProbability+\"°C\"}\n          lowestTempHour={lowestTempHour}\n          lowestTempProbability={lowestTempProbability+\"°C\"}\n          highestPrecipHour={highestPrecipHour}\n          highestPrecipProbability={highestPrecipProbability+\"mm\"}\n          lowestPrecipHour={lowestPrecipHour}\n          lowestPrecipProbability={lowestPrecipProbability+\"mm\"}\n        />\n        <ChartSection\n          temperature={weatherData.hourly ? weatherData.hourly.temperature_2m : []}\n          precipitationProbability={weatherData.hourly ? weatherData.hourly.precipitation_probability : []}\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}