{"ast":null,"code":"import _slicedToArray from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _regeneratorRuntime from\"/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/node_modules/@babel/runtime/regenerator/index.js\";import React,{Component}from'react';import CardSection from'./components/CardSection';import ChartSection from'./components/ChartSection';import Header from'./components/Header';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);_this.fetchData=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,jsonData,temperatureProbabilities,highestTempProbability,lowestTempProbability,highestTempIndex,lowestTempIndex,temperatureHours,highestTempHour,lowestTempHour,precipitationProbabilities,highestPrecipProbability,lowestPrecipProbability,highestPrecipIndex,lowestPrecipIndex,precipitationHours,highestPrecipHour,lowestPrecipHour;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"https://api.open-meteo.com/v1/forecast?latitude=\".concat(_this.state.latitude,\"&longitude=\").concat(_this.state.longitude,\"&hourly=temperature_2m,precipitation_probability&forecast_days=1\"));case 3:response=_context.sent;_context.next=6;return response.json();case 6:jsonData=_context.sent;// Determine highest and lowest temperature probability\ntemperatureProbabilities=jsonData.hourly.temperature_2m;highestTempProbability=Math.max.apply(Math,_toConsumableArray(temperatureProbabilities));lowestTempProbability=Math.min.apply(Math,_toConsumableArray(temperatureProbabilities));highestTempIndex=temperatureProbabilities.indexOf(highestTempProbability);lowestTempIndex=temperatureProbabilities.indexOf(lowestTempProbability);// Determine highest and lowest temperature hours\ntemperatureHours=jsonData.hourly.time;highestTempHour=temperatureHours[highestTempIndex];lowestTempHour=temperatureHours[lowestTempIndex];// Determine highest and lowest precipitation probability\nprecipitationProbabilities=jsonData.hourly.precipitation_probability;highestPrecipProbability=Math.max.apply(Math,_toConsumableArray(precipitationProbabilities));lowestPrecipProbability=Math.min.apply(Math,_toConsumableArray(precipitationProbabilities));highestPrecipIndex=precipitationProbabilities.indexOf(highestPrecipProbability);lowestPrecipIndex=precipitationProbabilities.indexOf(lowestPrecipProbability);// Determine highest and lowest precipitation hours\nprecipitationHours=jsonData.hourly.time;highestPrecipHour=precipitationHours[highestPrecipIndex];lowestPrecipHour=precipitationHours[lowestPrecipIndex];_this.setState({weatherData:jsonData,highestTempHour:highestTempHour,highestTempProbability:highestTempProbability,lowestTempHour:lowestTempHour,lowestTempProbability:lowestTempProbability,highestPrecipHour:highestPrecipHour,highestPrecipProbability:highestPrecipProbability,lowestPrecipHour:lowestPrecipHour,lowestPrecipProbability:lowestPrecipProbability});_context.next=29;break;case 26:_context.prev=26;_context.t0=_context[\"catch\"](0);console.error('Error fetching data:',_context.t0);case 29:case\"end\":return _context.stop();}}},_callee,null,[[0,26]]);}));_this.handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event){var selectedOption,_selectedOption$split,_selectedOption$split2,latitude,longitude;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:selectedOption=event.target.value;_selectedOption$split=selectedOption.split(','),_selectedOption$split2=_slicedToArray(_selectedOption$split,2),latitude=_selectedOption$split2[0],longitude=_selectedOption$split2[1];_context2.next=4;return _this.setState({latitude:latitude,longitude:longitude,weatherData:{}},function(){_this.fetchData();});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}();_this.state={latitude:1,longitude:38,weatherData:{},highestTempHour:'',highestTempProbability:'',lowestTempHour:'',lowestTempProbability:'',highestPrecipHour:'',highestPrecipProbability:'',lowestPrecipHour:'',lowestPrecipProbability:''};_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this));return _this;}_createClass(App,[{key:\"componentDidMount\",value:function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _this2=this;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return this.fetchData();case 2:this.interval=setInterval(function(){return _this2.fetchData();},2000);case 3:case\"end\":return _context3.stop();}}},_callee3,this);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.interval);}},{key:\"render\",value:function render(){var _this$state=this.state,weatherData=_this$state.weatherData,highestTempHour=_this$state.highestTempHour,highestTempProbability=_this$state.highestTempProbability,lowestTempHour=_this$state.lowestTempHour,lowestTempProbability=_this$state.lowestTempProbability,highestPrecipHour=_this$state.highestPrecipHour,highestPrecipProbability=_this$state.highestPrecipProbability,lowestPrecipHour=_this$state.lowestPrecipHour,lowestPrecipProbability=_this$state.lowestPrecipProbability;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{handle_Submit:this.handleSubmit}),/*#__PURE__*/_jsx(CardSection,{highestTempHour:highestTempHour,highestTempProbability:highestTempProbability+\"°C\",lowestTempHour:lowestTempHour,lowestTempProbability:lowestTempProbability+\"°C\",highestPrecipHour:highestPrecipHour,highestPrecipProbability:highestPrecipProbability+\"%\",lowestPrecipHour:lowestPrecipHour,lowestPrecipProbability:lowestPrecipProbability+\"%\"}),/*#__PURE__*/_jsx(ChartSection,{temperature:weatherData.hourly?weatherData.hourly.temperature_2m:[],precipitationProbability:weatherData.hourly?weatherData.hourly.precipitation_probability:[]})]});}}]);return App;}(Component);export{App as default};","map":{"version":3,"sources":["/home/vincent/portfolio/react-weather-forecast-dashboard/React-Live-Dashboard/src/App.js"],"names":["React","Component","CardSection","ChartSection","Header","App","fetchData","fetch","state","latitude","longitude","response","json","jsonData","temperatureProbabilities","hourly","temperature_2m","highestTempProbability","Math","max","lowestTempProbability","min","highestTempIndex","indexOf","lowestTempIndex","temperatureHours","time","highestTempHour","lowestTempHour","precipitationProbabilities","precipitation_probability","highestPrecipProbability","lowestPrecipProbability","highestPrecipIndex","lowestPrecipIndex","precipitationHours","highestPrecipHour","lowestPrecipHour","setState","weatherData","console","error","handleSubmit","event","selectedOption","target","value","split","bind","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CardSection from './components/CardSection';\nimport ChartSection from './components/ChartSection';\nimport Header from './components/Header';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      latitude: 1,\n      longitude: 38,\n      weatherData: {},\n      highestTempHour: '',\n      highestTempProbability: '',\n      lowestTempHour: '',\n      lowestTempProbability: '',\n      highestPrecipHour: '',\n      highestPrecipProbability: '',\n      lowestPrecipHour: '',\n      lowestPrecipProbability: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  fetchData = async () => {\n    try {\n      const response = await fetch(\n        `https://api.open-meteo.com/v1/forecast?latitude=${this.state.latitude}&longitude=${this.state.longitude}&hourly=temperature_2m,precipitation_probability&forecast_days=1`\n      );\n      const jsonData = await response.json();\n\n      // Determine highest and lowest temperature probability\n      const temperatureProbabilities = jsonData.hourly.temperature_2m;\n      const highestTempProbability = Math.max(...temperatureProbabilities);\n      const lowestTempProbability = Math.min(...temperatureProbabilities);\n      const highestTempIndex = temperatureProbabilities.indexOf(highestTempProbability);\n      const lowestTempIndex = temperatureProbabilities.indexOf(lowestTempProbability);\n\n      // Determine highest and lowest temperature hours\n      const temperatureHours = jsonData.hourly.time;\n      const highestTempHour = temperatureHours[highestTempIndex];\n      const lowestTempHour = temperatureHours[lowestTempIndex];\n\n      // Determine highest and lowest precipitation probability\n      const precipitationProbabilities = jsonData.hourly.precipitation_probability;\n      const highestPrecipProbability = Math.max(...precipitationProbabilities);\n      const lowestPrecipProbability = Math.min(...precipitationProbabilities);\n      const highestPrecipIndex = precipitationProbabilities.indexOf(highestPrecipProbability);\n      const lowestPrecipIndex = precipitationProbabilities.indexOf(lowestPrecipProbability);\n\n      // Determine highest and lowest precipitation hours\n      const precipitationHours = jsonData.hourly.time;\n      const highestPrecipHour = precipitationHours[highestPrecipIndex];\n      const lowestPrecipHour = precipitationHours[lowestPrecipIndex];\n\n      this.setState({ \n        weatherData: jsonData,\n        highestTempHour,\n        highestTempProbability,\n        lowestTempHour,\n        lowestTempProbability,\n        highestPrecipHour,\n        highestPrecipProbability,\n        lowestPrecipHour,\n        lowestPrecipProbability\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  async componentDidMount() {\n    await this.fetchData();\n    this.interval = setInterval(() => this.fetchData(), 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleSubmit = async (event) => {\n    const selectedOption = event.target.value;\n    const [latitude, longitude] = selectedOption.split(',');\n    \n    await this.setState({ latitude, longitude, weatherData: {} }, () => {\n        this.fetchData();\n    });\n  };\n\n  render() {\n    const { weatherData, highestTempHour, highestTempProbability, lowestTempHour, lowestTempProbability, highestPrecipHour, highestPrecipProbability, lowestPrecipHour, lowestPrecipProbability } = this.state;\n\n    return (\n      <div>\n        <Header handle_Submit={this.handleSubmit} />\n        <CardSection\n          highestTempHour={highestTempHour}\n          highestTempProbability={highestTempProbability+\"°C\"}\n          lowestTempHour={lowestTempHour}\n          lowestTempProbability={lowestTempProbability+\"°C\"}\n          highestPrecipHour={highestPrecipHour}\n          highestPrecipProbability={highestPrecipProbability+\"%\"}\n          lowestPrecipHour={lowestPrecipHour}\n          lowestPrecipProbability={lowestPrecipProbability+\"%\"}\n        />\n        <ChartSection\n          temperature={weatherData.hourly ? weatherData.hourly.temperature_2m : []}\n          precipitationProbability={weatherData.hourly ? weatherData.hourly.precipitation_probability : []}\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}